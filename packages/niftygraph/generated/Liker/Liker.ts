// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class contractAdded extends ethereum.Event {
  get params(): contractAdded__Params {
    return new contractAdded__Params(this);
  }
}

export class contractAdded__Params {
  _event: contractAdded;

  constructor(event: contractAdded) {
    this._event = event;
  }

  get targetContract(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get contractOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class contractRemoved extends ethereum.Event {
  get params(): contractRemoved__Params {
    return new contractRemoved__Params(this);
  }
}

export class contractRemoved__Params {
  _event: contractRemoved;

  constructor(event: contractRemoved) {
    this._event = event;
  }

  get targetContract(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get contractOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class liked extends ethereum.Event {
  get params(): liked__Params {
    return new liked__Params(this);
  }
}

export class liked__Params {
  _event: liked;

  constructor(event: liked) {
    this._event = event;
  }

  get LikeId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get targetContract(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get target(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get targetId(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get liker(): Address {
    return this._event.parameters[4].value.toAddress();
  }
}

export class Liker__getLikeInfoByIdResult {
  value0: BigInt;
  value1: Address;
  value2: BigInt;
  value3: Address;
  value4: BigInt;

  constructor(
    value0: BigInt,
    value1: Address,
    value2: BigInt,
    value3: Address,
    value4: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromAddress(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromAddress(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    return map;
  }

  getValue0(): BigInt {
    return this.value0;
  }

  getValue1(): Address {
    return this.value1;
  }

  getValue2(): BigInt {
    return this.value2;
  }

  getValue3(): Address {
    return this.value3;
  }

  getValue4(): BigInt {
    return this.value4;
  }
}

export class Liker extends ethereum.SmartContract {
  static bind(address: Address): Liker {
    return new Liker("Liker", address);
  }

  addContract(contractAddress: Address): boolean {
    let result = super.call("addContract", "addContract(address):(bool)", [
      ethereum.Value.fromAddress(contractAddress)
    ]);

    return result[0].toBoolean();
  }

  try_addContract(contractAddress: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("addContract", "addContract(address):(bool)", [
      ethereum.Value.fromAddress(contractAddress)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  checkLike(contractAddress: Address, target: BigInt, liker: Address): boolean {
    let result = super.call(
      "checkLike",
      "checkLike(address,uint256,address):(bool)",
      [
        ethereum.Value.fromAddress(contractAddress),
        ethereum.Value.fromUnsignedBigInt(target),
        ethereum.Value.fromAddress(liker)
      ]
    );

    return result[0].toBoolean();
  }

  try_checkLike(
    contractAddress: Address,
    target: BigInt,
    liker: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "checkLike",
      "checkLike(address,uint256,address):(bool)",
      [
        ethereum.Value.fromAddress(contractAddress),
        ethereum.Value.fromUnsignedBigInt(target),
        ethereum.Value.fromAddress(liker)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  checkSignature(
    signedHash: Bytes,
    signature: Bytes,
    checkAddress: Address
  ): boolean {
    let result = super.call(
      "checkSignature",
      "checkSignature(bytes32,bytes,address):(bool)",
      [
        ethereum.Value.fromFixedBytes(signedHash),
        ethereum.Value.fromBytes(signature),
        ethereum.Value.fromAddress(checkAddress)
      ]
    );

    return result[0].toBoolean();
  }

  try_checkSignature(
    signedHash: Bytes,
    signature: Bytes,
    checkAddress: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "checkSignature",
      "checkSignature(bytes32,bytes,address):(bool)",
      [
        ethereum.Value.fromFixedBytes(signedHash),
        ethereum.Value.fromBytes(signature),
        ethereum.Value.fromAddress(checkAddress)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  checkSignatureFlag(): boolean {
    let result = super.call(
      "checkSignatureFlag",
      "checkSignatureFlag():(bool)",
      []
    );

    return result[0].toBoolean();
  }

  try_checkSignatureFlag(): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "checkSignatureFlag",
      "checkSignatureFlag():(bool)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  contractOwner(param0: Address): Address {
    let result = super.call(
      "contractOwner",
      "contractOwner(address):(address)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toAddress();
  }

  try_contractOwner(param0: Address): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "contractOwner",
      "contractOwner(address):(address)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getLikeIdByIndex(index: BigInt): BigInt {
    let result = super.call(
      "getLikeIdByIndex",
      "getLikeIdByIndex(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(index)]
    );

    return result[0].toBigInt();
  }

  try_getLikeIdByIndex(index: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getLikeIdByIndex",
      "getLikeIdByIndex(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(index)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getLikeInfoById(likeId: BigInt): Liker__getLikeInfoByIdResult {
    let result = super.call(
      "getLikeInfoById",
      "getLikeInfoById(uint256):(uint256,address,uint256,address,uint256)",
      [ethereum.Value.fromUnsignedBigInt(likeId)]
    );

    return new Liker__getLikeInfoByIdResult(
      result[0].toBigInt(),
      result[1].toAddress(),
      result[2].toBigInt(),
      result[3].toAddress(),
      result[4].toBigInt()
    );
  }

  try_getLikeInfoById(
    likeId: BigInt
  ): ethereum.CallResult<Liker__getLikeInfoByIdResult> {
    let result = super.tryCall(
      "getLikeInfoById",
      "getLikeInfoById(uint256):(uint256,address,uint256,address,uint256)",
      [ethereum.Value.fromUnsignedBigInt(likeId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Liker__getLikeInfoByIdResult(
        value[0].toBigInt(),
        value[1].toAddress(),
        value[2].toBigInt(),
        value[3].toAddress(),
        value[4].toBigInt()
      )
    );
  }

  getLikesByContract(contractAddress: Address): BigInt {
    let result = super.call(
      "getLikesByContract",
      "getLikesByContract(address):(uint256)",
      [ethereum.Value.fromAddress(contractAddress)]
    );

    return result[0].toBigInt();
  }

  try_getLikesByContract(
    contractAddress: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getLikesByContract",
      "getLikesByContract(address):(uint256)",
      [ethereum.Value.fromAddress(contractAddress)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getLikesByLiker(liker: Address): BigInt {
    let result = super.call(
      "getLikesByLiker",
      "getLikesByLiker(address):(uint256)",
      [ethereum.Value.fromAddress(liker)]
    );

    return result[0].toBigInt();
  }

  try_getLikesByLiker(liker: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getLikesByLiker",
      "getLikesByLiker(address):(uint256)",
      [ethereum.Value.fromAddress(liker)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getLikesByTarget(contractAddress: Address, target: BigInt): BigInt {
    let result = super.call(
      "getLikesByTarget",
      "getLikesByTarget(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(contractAddress),
        ethereum.Value.fromUnsignedBigInt(target)
      ]
    );

    return result[0].toBigInt();
  }

  try_getLikesByTarget(
    contractAddress: Address,
    target: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getLikesByTarget",
      "getLikesByTarget(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(contractAddress),
        ethereum.Value.fromUnsignedBigInt(target)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getLikesByTargetId(targetId: BigInt): BigInt {
    let result = super.call(
      "getLikesByTargetId",
      "getLikesByTargetId(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(targetId)]
    );

    return result[0].toBigInt();
  }

  try_getLikesByTargetId(targetId: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getLikesByTargetId",
      "getLikesByTargetId(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(targetId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getSigner(signedHash: Bytes, signature: Bytes): Address {
    let result = super.call("getSigner", "getSigner(bytes32,bytes):(address)", [
      ethereum.Value.fromFixedBytes(signedHash),
      ethereum.Value.fromBytes(signature)
    ]);

    return result[0].toAddress();
  }

  try_getSigner(
    signedHash: Bytes,
    signature: Bytes
  ): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getSigner",
      "getSigner(bytes32,bytes):(address)",
      [
        ethereum.Value.fromFixedBytes(signedHash),
        ethereum.Value.fromBytes(signature)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getTargetId(contractAddress: Address, target: BigInt): BigInt {
    let result = super.call(
      "getTargetId",
      "getTargetId(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(contractAddress),
        ethereum.Value.fromUnsignedBigInt(target)
      ]
    );

    return result[0].toBigInt();
  }

  try_getTargetId(
    contractAddress: Address,
    target: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getTargetId",
      "getTargetId(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(contractAddress),
        ethereum.Value.fromUnsignedBigInt(target)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getTrustedForwarder(): Address {
    let result = super.call(
      "getTrustedForwarder",
      "getTrustedForwarder():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_getTrustedForwarder(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getTrustedForwarder",
      "getTrustedForwarder():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  isTrustedForwarder(forwarder: Address): boolean {
    let result = super.call(
      "isTrustedForwarder",
      "isTrustedForwarder(address):(bool)",
      [ethereum.Value.fromAddress(forwarder)]
    );

    return result[0].toBoolean();
  }

  try_isTrustedForwarder(forwarder: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isTrustedForwarder",
      "isTrustedForwarder(address):(bool)",
      [ethereum.Value.fromAddress(forwarder)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  like(contractAddress: Address, target: BigInt): BigInt {
    let result = super.call("like", "like(address,uint256):(uint256)", [
      ethereum.Value.fromAddress(contractAddress),
      ethereum.Value.fromUnsignedBigInt(target)
    ]);

    return result[0].toBigInt();
  }

  try_like(
    contractAddress: Address,
    target: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall("like", "like(address,uint256):(uint256)", [
      ethereum.Value.fromAddress(contractAddress),
      ethereum.Value.fromUnsignedBigInt(target)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  likeWithSignature(
    contractAddress: Address,
    target: BigInt,
    liker: Address,
    signature: Bytes
  ): BigInt {
    let result = super.call(
      "likeWithSignature",
      "likeWithSignature(address,uint256,address,bytes):(uint256)",
      [
        ethereum.Value.fromAddress(contractAddress),
        ethereum.Value.fromUnsignedBigInt(target),
        ethereum.Value.fromAddress(liker),
        ethereum.Value.fromBytes(signature)
      ]
    );

    return result[0].toBigInt();
  }

  try_likeWithSignature(
    contractAddress: Address,
    target: BigInt,
    liker: Address,
    signature: Bytes
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "likeWithSignature",
      "likeWithSignature(address,uint256,address,bytes):(uint256)",
      [
        ethereum.Value.fromAddress(contractAddress),
        ethereum.Value.fromUnsignedBigInt(target),
        ethereum.Value.fromAddress(liker),
        ethereum.Value.fromBytes(signature)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  registeredContracts(param0: Address): boolean {
    let result = super.call(
      "registeredContracts",
      "registeredContracts(address):(bool)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toBoolean();
  }

  try_registeredContracts(param0: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "registeredContracts",
      "registeredContracts(address):(bool)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  removeContract(contractAddress: Address): boolean {
    let result = super.call(
      "removeContract",
      "removeContract(address):(bool)",
      [ethereum.Value.fromAddress(contractAddress)]
    );

    return result[0].toBoolean();
  }

  try_removeContract(contractAddress: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "removeContract",
      "removeContract(address):(bool)",
      [ethereum.Value.fromAddress(contractAddress)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  totalLikes(): BigInt {
    let result = super.call("totalLikes", "totalLikes():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalLikes(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalLikes", "totalLikes():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  versionRecipient(): string {
    let result = super.call(
      "versionRecipient",
      "versionRecipient():(string)",
      []
    );

    return result[0].toString();
  }

  try_versionRecipient(): ethereum.CallResult<string> {
    let result = super.tryCall(
      "versionRecipient",
      "versionRecipient():(string)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }
}

export class AddContractCall extends ethereum.Call {
  get inputs(): AddContractCall__Inputs {
    return new AddContractCall__Inputs(this);
  }

  get outputs(): AddContractCall__Outputs {
    return new AddContractCall__Outputs(this);
  }
}

export class AddContractCall__Inputs {
  _call: AddContractCall;

  constructor(call: AddContractCall) {
    this._call = call;
  }

  get contractAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class AddContractCall__Outputs {
  _call: AddContractCall;

  constructor(call: AddContractCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class LikeCall extends ethereum.Call {
  get inputs(): LikeCall__Inputs {
    return new LikeCall__Inputs(this);
  }

  get outputs(): LikeCall__Outputs {
    return new LikeCall__Outputs(this);
  }
}

export class LikeCall__Inputs {
  _call: LikeCall;

  constructor(call: LikeCall) {
    this._call = call;
  }

  get contractAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get target(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class LikeCall__Outputs {
  _call: LikeCall;

  constructor(call: LikeCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class LikeWithSignatureCall extends ethereum.Call {
  get inputs(): LikeWithSignatureCall__Inputs {
    return new LikeWithSignatureCall__Inputs(this);
  }

  get outputs(): LikeWithSignatureCall__Outputs {
    return new LikeWithSignatureCall__Outputs(this);
  }
}

export class LikeWithSignatureCall__Inputs {
  _call: LikeWithSignatureCall;

  constructor(call: LikeWithSignatureCall) {
    this._call = call;
  }

  get contractAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get target(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get liker(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get signature(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class LikeWithSignatureCall__Outputs {
  _call: LikeWithSignatureCall;

  constructor(call: LikeWithSignatureCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class RemoveContractCall extends ethereum.Call {
  get inputs(): RemoveContractCall__Inputs {
    return new RemoveContractCall__Inputs(this);
  }

  get outputs(): RemoveContractCall__Outputs {
    return new RemoveContractCall__Outputs(this);
  }
}

export class RemoveContractCall__Inputs {
  _call: RemoveContractCall;

  constructor(call: RemoveContractCall) {
    this._call = call;
  }

  get contractAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class RemoveContractCall__Outputs {
  _call: RemoveContractCall;

  constructor(call: RemoveContractCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class SetCheckSignatureFlagCall extends ethereum.Call {
  get inputs(): SetCheckSignatureFlagCall__Inputs {
    return new SetCheckSignatureFlagCall__Inputs(this);
  }

  get outputs(): SetCheckSignatureFlagCall__Outputs {
    return new SetCheckSignatureFlagCall__Outputs(this);
  }
}

export class SetCheckSignatureFlagCall__Inputs {
  _call: SetCheckSignatureFlagCall;

  constructor(call: SetCheckSignatureFlagCall) {
    this._call = call;
  }

  get newFlag(): boolean {
    return this._call.inputValues[0].value.toBoolean();
  }
}

export class SetCheckSignatureFlagCall__Outputs {
  _call: SetCheckSignatureFlagCall;

  constructor(call: SetCheckSignatureFlagCall) {
    this._call = call;
  }
}

export class SetTrustedForwarderCall extends ethereum.Call {
  get inputs(): SetTrustedForwarderCall__Inputs {
    return new SetTrustedForwarderCall__Inputs(this);
  }

  get outputs(): SetTrustedForwarderCall__Outputs {
    return new SetTrustedForwarderCall__Outputs(this);
  }
}

export class SetTrustedForwarderCall__Inputs {
  _call: SetTrustedForwarderCall;

  constructor(call: SetTrustedForwarderCall) {
    this._call = call;
  }

  get _trustedForwarder(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetTrustedForwarderCall__Outputs {
  _call: SetTrustedForwarderCall;

  constructor(call: SetTrustedForwarderCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}
