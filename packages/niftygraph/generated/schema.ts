// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class Ink extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Ink entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Ink must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Ink", id.toString(), this);
    }
  }

  static load(id: string): Ink | null {
    return changetype<Ink | null>(store.get("Ink", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get inkNumber(): BigInt {
    let value = this.get("inkNumber");
    return value!.toBigInt();
  }

  set inkNumber(value: BigInt) {
    this.set("inkNumber", Value.fromBigInt(value));
  }

  get jsonUrl(): string {
    let value = this.get("jsonUrl");
    return value!.toString();
  }

  set jsonUrl(value: string) {
    this.set("jsonUrl", Value.fromString(value));
  }

  get artist(): string {
    let value = this.get("artist");
    return value!.toString();
  }

  set artist(value: string) {
    this.set("artist", Value.fromString(value));
  }

  get limit(): BigInt {
    let value = this.get("limit");
    return value!.toBigInt();
  }

  set limit(value: BigInt) {
    this.set("limit", Value.fromBigInt(value));
  }

  get count(): BigInt {
    let value = this.get("count");
    return value!.toBigInt();
  }

  set count(value: BigInt) {
    this.set("count", Value.fromBigInt(value));
  }

  get tokens(): Array<string> {
    let value = this.get("tokens");
    return value!.toStringArray();
  }

  set tokens(value: Array<string>) {
    this.set("tokens", Value.fromStringArray(value));
  }

  get sales(): Array<string> | null {
    let value = this.get("sales");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set sales(value: Array<string> | null) {
    if (!value) {
      this.unset("sales");
    } else {
      this.set("sales", Value.fromStringArray(<Array<string>>value));
    }
  }

  get likes(): Array<string> | null {
    let value = this.get("likes");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set likes(value: Array<string> | null) {
    if (!value) {
      this.unset("likes");
    } else {
      this.set("likes", Value.fromStringArray(<Array<string>>value));
    }
  }

  get tokenTransfers(): Array<string> | null {
    let value = this.get("tokenTransfers");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set tokenTransfers(value: Array<string> | null) {
    if (!value) {
      this.unset("tokenTransfers");
    } else {
      this.set("tokenTransfers", Value.fromStringArray(<Array<string>>value));
    }
  }

  get createdAt(): BigInt | null {
    let value = this.get("createdAt");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set createdAt(value: BigInt | null) {
    if (!value) {
      this.unset("createdAt");
    } else {
      this.set("createdAt", Value.fromBigInt(<BigInt>value));
    }
  }

  get mintPrice(): BigInt {
    let value = this.get("mintPrice");
    return value!.toBigInt();
  }

  set mintPrice(value: BigInt) {
    this.set("mintPrice", Value.fromBigInt(value));
  }

  get mintPriceSetAt(): BigInt | null {
    let value = this.get("mintPriceSetAt");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set mintPriceSetAt(value: BigInt | null) {
    if (!value) {
      this.unset("mintPriceSetAt");
    } else {
      this.set("mintPriceSetAt", Value.fromBigInt(<BigInt>value));
    }
  }

  get mintPriceNonce(): BigInt | null {
    let value = this.get("mintPriceNonce");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set mintPriceNonce(value: BigInt | null) {
    if (!value) {
      this.unset("mintPriceNonce");
    } else {
      this.set("mintPriceNonce", Value.fromBigInt(<BigInt>value));
    }
  }

  get bestPrice(): BigInt {
    let value = this.get("bestPrice");
    return value!.toBigInt();
  }

  set bestPrice(value: BigInt) {
    this.set("bestPrice", Value.fromBigInt(value));
  }

  get bestPriceSource(): string | null {
    let value = this.get("bestPriceSource");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set bestPriceSource(value: string | null) {
    if (!value) {
      this.unset("bestPriceSource");
    } else {
      this.set("bestPriceSource", Value.fromString(<string>value));
    }
  }

  get bestPriceSetAt(): BigInt | null {
    let value = this.get("bestPriceSetAt");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set bestPriceSetAt(value: BigInt | null) {
    if (!value) {
      this.unset("bestPriceSetAt");
    } else {
      this.set("bestPriceSetAt", Value.fromBigInt(<BigInt>value));
    }
  }

  get likeCount(): BigInt | null {
    let value = this.get("likeCount");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set likeCount(value: BigInt | null) {
    if (!value) {
      this.unset("likeCount");
    } else {
      this.set("likeCount", Value.fromBigInt(<BigInt>value));
    }
  }

  get burnedCount(): BigInt | null {
    let value = this.get("burnedCount");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set burnedCount(value: BigInt | null) {
    if (!value) {
      this.unset("burnedCount");
    } else {
      this.set("burnedCount", Value.fromBigInt(<BigInt>value));
    }
  }

  get burned(): boolean {
    let value = this.get("burned");
    return value!.toBoolean();
  }

  set burned(value: boolean) {
    this.set("burned", Value.fromBoolean(value));
  }

  get metadata(): string | null {
    let value = this.get("metadata");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set metadata(value: string | null) {
    if (!value) {
      this.unset("metadata");
    } else {
      this.set("metadata", Value.fromString(<string>value));
    }
  }
}

export class InkMetadata extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save InkMetadata entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type InkMetadata must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("InkMetadata", id.toString(), this);
    }
  }

  static load(id: string): InkMetadata | null {
    return changetype<InkMetadata | null>(store.get("InkMetadata", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get name(): string | null {
    let value = this.get("name");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set name(value: string | null) {
    if (!value) {
      this.unset("name");
    } else {
      this.set("name", Value.fromString(<string>value));
    }
  }

  get image(): string | null {
    let value = this.get("image");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set image(value: string | null) {
    if (!value) {
      this.unset("image");
    } else {
      this.set("image", Value.fromString(<string>value));
    }
  }

  get description(): string | null {
    let value = this.get("description");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set description(value: string | null) {
    if (!value) {
      this.unset("description");
    } else {
      this.set("description", Value.fromString(<string>value));
    }
  }
}

export class Token extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Token entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Token must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Token", id.toString(), this);
    }
  }

  static load(id: string): Token | null {
    return changetype<Token | null>(store.get("Token", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get ink(): string {
    let value = this.get("ink");
    return value!.toString();
  }

  set ink(value: string) {
    this.set("ink", Value.fromString(value));
  }

  get owner(): string {
    let value = this.get("owner");
    return value!.toString();
  }

  set owner(value: string) {
    this.set("owner", Value.fromString(value));
  }

  get collector(): string | null {
    let value = this.get("collector");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set collector(value: string | null) {
    if (!value) {
      this.unset("collector");
    } else {
      this.set("collector", Value.fromString(<string>value));
    }
  }

  get createdAt(): BigInt {
    let value = this.get("createdAt");
    return value!.toBigInt();
  }

  set createdAt(value: BigInt) {
    this.set("createdAt", Value.fromBigInt(value));
  }

  get network(): string {
    let value = this.get("network");
    return value!.toString();
  }

  set network(value: string) {
    this.set("network", Value.fromString(value));
  }

  get price(): BigInt {
    let value = this.get("price");
    return value!.toBigInt();
  }

  set price(value: BigInt) {
    this.set("price", Value.fromBigInt(value));
  }

  get priceSetAt(): BigInt | null {
    let value = this.get("priceSetAt");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set priceSetAt(value: BigInt | null) {
    if (!value) {
      this.unset("priceSetAt");
    } else {
      this.set("priceSetAt", Value.fromBigInt(<BigInt>value));
    }
  }

  get transferCount(): BigInt {
    let value = this.get("transferCount");
    return value!.toBigInt();
  }

  set transferCount(value: BigInt) {
    this.set("transferCount", Value.fromBigInt(value));
  }

  get transfers(): Array<string> | null {
    let value = this.get("transfers");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set transfers(value: Array<string> | null) {
    if (!value) {
      this.unset("transfers");
    } else {
      this.set("transfers", Value.fromStringArray(<Array<string>>value));
    }
  }

  get sales(): Array<string> | null {
    let value = this.get("sales");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set sales(value: Array<string> | null) {
    if (!value) {
      this.unset("sales");
    } else {
      this.set("sales", Value.fromStringArray(<Array<string>>value));
    }
  }

  get upgradeTransfer(): string | null {
    let value = this.get("upgradeTransfer");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set upgradeTransfer(value: string | null) {
    if (!value) {
      this.unset("upgradeTransfer");
    } else {
      this.set("upgradeTransfer", Value.fromString(<string>value));
    }
  }

  get burned(): boolean {
    let value = this.get("burned");
    return value!.toBoolean();
  }

  set burned(value: boolean) {
    this.set("burned", Value.fromBoolean(value));
  }

  get artist(): string | null {
    let value = this.get("artist");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set artist(value: string | null) {
    if (!value) {
      this.unset("artist");
    } else {
      this.set("artist", Value.fromString(<string>value));
    }
  }

  get edition(): BigInt | null {
    let value = this.get("edition");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set edition(value: BigInt | null) {
    if (!value) {
      this.unset("edition");
    } else {
      this.set("edition", Value.fromBigInt(<BigInt>value));
    }
  }

  get lastTransferAt(): BigInt {
    let value = this.get("lastTransferAt");
    return value!.toBigInt();
  }

  set lastTransferAt(value: BigInt) {
    this.set("lastTransferAt", Value.fromBigInt(value));
  }
}

export class Artist extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Artist entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Artist must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Artist", id.toString(), this);
    }
  }

  static load(id: string): Artist | null {
    return changetype<Artist | null>(store.get("Artist", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get address(): Bytes {
    let value = this.get("address");
    return value!.toBytes();
  }

  set address(value: Bytes) {
    this.set("address", Value.fromBytes(value));
  }

  get inks(): Array<string> | null {
    let value = this.get("inks");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set inks(value: Array<string> | null) {
    if (!value) {
      this.unset("inks");
    } else {
      this.set("inks", Value.fromStringArray(<Array<string>>value));
    }
  }

  get inkCount(): BigInt {
    let value = this.get("inkCount");
    return value!.toBigInt();
  }

  set inkCount(value: BigInt) {
    this.set("inkCount", Value.fromBigInt(value));
  }

  get earnings(): BigInt | null {
    let value = this.get("earnings");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set earnings(value: BigInt | null) {
    if (!value) {
      this.unset("earnings");
    } else {
      this.set("earnings", Value.fromBigInt(<BigInt>value));
    }
  }

  get sales(): Array<string> | null {
    let value = this.get("sales");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set sales(value: Array<string> | null) {
    if (!value) {
      this.unset("sales");
    } else {
      this.set("sales", Value.fromStringArray(<Array<string>>value));
    }
  }

  get likes(): Array<string> | null {
    let value = this.get("likes");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set likes(value: Array<string> | null) {
    if (!value) {
      this.unset("likes");
    } else {
      this.set("likes", Value.fromStringArray(<Array<string>>value));
    }
  }

  get tokenTransfers(): Array<string> | null {
    let value = this.get("tokenTransfers");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set tokenTransfers(value: Array<string> | null) {
    if (!value) {
      this.unset("tokenTransfers");
    } else {
      this.set("tokenTransfers", Value.fromStringArray(<Array<string>>value));
    }
  }

  get tokens(): Array<string> | null {
    let value = this.get("tokens");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set tokens(value: Array<string> | null) {
    if (!value) {
      this.unset("tokens");
    } else {
      this.set("tokens", Value.fromStringArray(<Array<string>>value));
    }
  }

  get likeCount(): BigInt {
    let value = this.get("likeCount");
    return value!.toBigInt();
  }

  set likeCount(value: BigInt) {
    this.set("likeCount", Value.fromBigInt(value));
  }

  get saleCount(): BigInt {
    let value = this.get("saleCount");
    return value!.toBigInt();
  }

  set saleCount(value: BigInt) {
    this.set("saleCount", Value.fromBigInt(value));
  }

  get createdAt(): BigInt {
    let value = this.get("createdAt");
    return value!.toBigInt();
  }

  set createdAt(value: BigInt) {
    this.set("createdAt", Value.fromBigInt(value));
  }

  get lastInkAt(): BigInt | null {
    let value = this.get("lastInkAt");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set lastInkAt(value: BigInt | null) {
    if (!value) {
      this.unset("lastInkAt");
    } else {
      this.set("lastInkAt", Value.fromBigInt(<BigInt>value));
    }
  }

  get lastLikeAt(): BigInt | null {
    let value = this.get("lastLikeAt");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set lastLikeAt(value: BigInt | null) {
    if (!value) {
      this.unset("lastLikeAt");
    } else {
      this.set("lastLikeAt", Value.fromBigInt(<BigInt>value));
    }
  }

  get lastSaleAt(): BigInt | null {
    let value = this.get("lastSaleAt");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set lastSaleAt(value: BigInt | null) {
    if (!value) {
      this.unset("lastSaleAt");
    } else {
      this.set("lastSaleAt", Value.fromBigInt(<BigInt>value));
    }
  }
}

export class User extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save User entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type User must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("User", id.toString(), this);
    }
  }

  static load(id: string): User | null {
    return changetype<User | null>(store.get("User", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get artist(): string | null {
    let value = this.get("artist");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set artist(value: string | null) {
    if (!value) {
      this.unset("artist");
    } else {
      this.set("artist", Value.fromString(<string>value));
    }
  }

  get address(): Bytes {
    let value = this.get("address");
    return value!.toBytes();
  }

  set address(value: Bytes) {
    this.set("address", Value.fromBytes(value));
  }

  get tokens(): Array<string> | null {
    let value = this.get("tokens");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set tokens(value: Array<string> | null) {
    if (!value) {
      this.unset("tokens");
    } else {
      this.set("tokens", Value.fromStringArray(<Array<string>>value));
    }
  }

  get collectedTokens(): Array<string> | null {
    let value = this.get("collectedTokens");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set collectedTokens(value: Array<string> | null) {
    if (!value) {
      this.unset("collectedTokens");
    } else {
      this.set("collectedTokens", Value.fromStringArray(<Array<string>>value));
    }
  }

  get sales(): Array<string> | null {
    let value = this.get("sales");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set sales(value: Array<string> | null) {
    if (!value) {
      this.unset("sales");
    } else {
      this.set("sales", Value.fromStringArray(<Array<string>>value));
    }
  }

  get purchases(): Array<string> | null {
    let value = this.get("purchases");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set purchases(value: Array<string> | null) {
    if (!value) {
      this.unset("purchases");
    } else {
      this.set("purchases", Value.fromStringArray(<Array<string>>value));
    }
  }

  get likes(): Array<string> | null {
    let value = this.get("likes");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set likes(value: Array<string> | null) {
    if (!value) {
      this.unset("likes");
    } else {
      this.set("likes", Value.fromStringArray(<Array<string>>value));
    }
  }

  get transfersFrom(): Array<string> | null {
    let value = this.get("transfersFrom");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set transfersFrom(value: Array<string> | null) {
    if (!value) {
      this.unset("transfersFrom");
    } else {
      this.set("transfersFrom", Value.fromStringArray(<Array<string>>value));
    }
  }

  get transfersTo(): Array<string> | null {
    let value = this.get("transfersTo");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set transfersTo(value: Array<string> | null) {
    if (!value) {
      this.unset("transfersTo");
    } else {
      this.set("transfersTo", Value.fromStringArray(<Array<string>>value));
    }
  }

  get tokenCount(): BigInt {
    let value = this.get("tokenCount");
    return value!.toBigInt();
  }

  set tokenCount(value: BigInt) {
    this.set("tokenCount", Value.fromBigInt(value));
  }

  get fromCount(): BigInt {
    let value = this.get("fromCount");
    return value!.toBigInt();
  }

  set fromCount(value: BigInt) {
    this.set("fromCount", Value.fromBigInt(value));
  }

  get toCount(): BigInt {
    let value = this.get("toCount");
    return value!.toBigInt();
  }

  set toCount(value: BigInt) {
    this.set("toCount", Value.fromBigInt(value));
  }

  get likeCount(): BigInt {
    let value = this.get("likeCount");
    return value!.toBigInt();
  }

  set likeCount(value: BigInt) {
    this.set("likeCount", Value.fromBigInt(value));
  }

  get purchaseCount(): BigInt {
    let value = this.get("purchaseCount");
    return value!.toBigInt();
  }

  set purchaseCount(value: BigInt) {
    this.set("purchaseCount", Value.fromBigInt(value));
  }

  get purchaseValue(): BigInt {
    let value = this.get("purchaseValue");
    return value!.toBigInt();
  }

  set purchaseValue(value: BigInt) {
    this.set("purchaseValue", Value.fromBigInt(value));
  }

  get saleCount(): BigInt {
    let value = this.get("saleCount");
    return value!.toBigInt();
  }

  set saleCount(value: BigInt) {
    this.set("saleCount", Value.fromBigInt(value));
  }

  get saleValue(): BigInt {
    let value = this.get("saleValue");
    return value!.toBigInt();
  }

  set saleValue(value: BigInt) {
    this.set("saleValue", Value.fromBigInt(value));
  }

  get lastLikeAt(): BigInt | null {
    let value = this.get("lastLikeAt");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set lastLikeAt(value: BigInt | null) {
    if (!value) {
      this.unset("lastLikeAt");
    } else {
      this.set("lastLikeAt", Value.fromBigInt(<BigInt>value));
    }
  }

  get lastPurchaseAt(): BigInt {
    let value = this.get("lastPurchaseAt");
    return value!.toBigInt();
  }

  set lastPurchaseAt(value: BigInt) {
    this.set("lastPurchaseAt", Value.fromBigInt(value));
  }

  get lastSaleAt(): BigInt | null {
    let value = this.get("lastSaleAt");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set lastSaleAt(value: BigInt | null) {
    if (!value) {
      this.unset("lastSaleAt");
    } else {
      this.set("lastSaleAt", Value.fromBigInt(<BigInt>value));
    }
  }

  get lastTransferAt(): BigInt | null {
    let value = this.get("lastTransferAt");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set lastTransferAt(value: BigInt | null) {
    if (!value) {
      this.unset("lastTransferAt");
    } else {
      this.set("lastTransferAt", Value.fromBigInt(<BigInt>value));
    }
  }

  get createdAt(): BigInt | null {
    let value = this.get("createdAt");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set createdAt(value: BigInt | null) {
    if (!value) {
      this.unset("createdAt");
    } else {
      this.set("createdAt", Value.fromBigInt(<BigInt>value));
    }
  }

  get lastInkAt(): BigInt | null {
    let value = this.get("lastInkAt");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set lastInkAt(value: BigInt | null) {
    if (!value) {
      this.unset("lastInkAt");
    } else {
      this.set("lastInkAt", Value.fromBigInt(<BigInt>value));
    }
  }

  get inkCount(): BigInt {
    let value = this.get("inkCount");
    return value!.toBigInt();
  }

  set inkCount(value: BigInt) {
    this.set("inkCount", Value.fromBigInt(value));
  }

  get collectionCount(): BigInt {
    let value = this.get("collectionCount");
    return value!.toBigInt();
  }

  set collectionCount(value: BigInt) {
    this.set("collectionCount", Value.fromBigInt(value));
  }
}

export class Sale extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Sale entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Sale must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Sale", id.toString(), this);
    }
  }

  static load(id: string): Sale | null {
    return changetype<Sale | null>(store.get("Sale", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get buyer(): string {
    let value = this.get("buyer");
    return value!.toString();
  }

  set buyer(value: string) {
    this.set("buyer", Value.fromString(value));
  }

  get seller(): string {
    let value = this.get("seller");
    return value!.toString();
  }

  set seller(value: string) {
    this.set("seller", Value.fromString(value));
  }

  get price(): BigInt {
    let value = this.get("price");
    return value!.toBigInt();
  }

  set price(value: BigInt) {
    this.set("price", Value.fromBigInt(value));
  }

  get token(): string {
    let value = this.get("token");
    return value!.toString();
  }

  set token(value: string) {
    this.set("token", Value.fromString(value));
  }

  get ink(): string {
    let value = this.get("ink");
    return value!.toString();
  }

  set ink(value: string) {
    this.set("ink", Value.fromString(value));
  }

  get artist(): string {
    let value = this.get("artist");
    return value!.toString();
  }

  set artist(value: string) {
    this.set("artist", Value.fromString(value));
  }

  get createdAt(): BigInt {
    let value = this.get("createdAt");
    return value!.toBigInt();
  }

  set createdAt(value: BigInt) {
    this.set("createdAt", Value.fromBigInt(value));
  }

  get artistTake(): BigInt {
    let value = this.get("artistTake");
    return value!.toBigInt();
  }

  set artistTake(value: BigInt) {
    this.set("artistTake", Value.fromBigInt(value));
  }

  get saleType(): string | null {
    let value = this.get("saleType");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set saleType(value: string | null) {
    if (!value) {
      this.unset("saleType");
    } else {
      this.set("saleType", Value.fromString(<string>value));
    }
  }

  get transfer(): string {
    let value = this.get("transfer");
    return value!.toString();
  }

  set transfer(value: string) {
    this.set("transfer", Value.fromString(value));
  }

  get transactionHash(): string | null {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set transactionHash(value: string | null) {
    if (!value) {
      this.unset("transactionHash");
    } else {
      this.set("transactionHash", Value.fromString(<string>value));
    }
  }
}

export class TokenTransfer extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save TokenTransfer entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type TokenTransfer must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("TokenTransfer", id.toString(), this);
    }
  }

  static load(id: string): TokenTransfer | null {
    return changetype<TokenTransfer | null>(store.get("TokenTransfer", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get token(): string {
    let value = this.get("token");
    return value!.toString();
  }

  set token(value: string) {
    this.set("token", Value.fromString(value));
  }

  get from(): string {
    let value = this.get("from");
    return value!.toString();
  }

  set from(value: string) {
    this.set("from", Value.fromString(value));
  }

  get to(): string {
    let value = this.get("to");
    return value!.toString();
  }

  set to(value: string) {
    this.set("to", Value.fromString(value));
  }

  get createdAt(): BigInt {
    let value = this.get("createdAt");
    return value!.toBigInt();
  }

  set createdAt(value: BigInt) {
    this.set("createdAt", Value.fromBigInt(value));
  }

  get network(): string | null {
    let value = this.get("network");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set network(value: string | null) {
    if (!value) {
      this.unset("network");
    } else {
      this.set("network", Value.fromString(<string>value));
    }
  }

  get ink(): string | null {
    let value = this.get("ink");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set ink(value: string | null) {
    if (!value) {
      this.unset("ink");
    } else {
      this.set("ink", Value.fromString(<string>value));
    }
  }

  get artist(): string | null {
    let value = this.get("artist");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set artist(value: string | null) {
    if (!value) {
      this.unset("artist");
    } else {
      this.set("artist", Value.fromString(<string>value));
    }
  }

  get transactionHash(): string {
    let value = this.get("transactionHash");
    return value!.toString();
  }

  set transactionHash(value: string) {
    this.set("transactionHash", Value.fromString(value));
  }

  get sale(): string | null {
    let value = this.get("sale");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set sale(value: string | null) {
    if (!value) {
      this.unset("sale");
    } else {
      this.set("sale", Value.fromString(<string>value));
    }
  }
}

export class RelayPrice extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save RelayPrice entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type RelayPrice must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("RelayPrice", id.toString(), this);
    }
  }

  static load(id: string): RelayPrice | null {
    return changetype<RelayPrice | null>(store.get("RelayPrice", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get createdAt(): BigInt {
    let value = this.get("createdAt");
    return value!.toBigInt();
  }

  set createdAt(value: BigInt) {
    this.set("createdAt", Value.fromBigInt(value));
  }

  get price(): BigInt {
    let value = this.get("price");
    return value!.toBigInt();
  }

  set price(value: BigInt) {
    this.set("price", Value.fromBigInt(value));
  }
}

export class MetaData extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save MetaData entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type MetaData must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("MetaData", id.toString(), this);
    }
  }

  static load(id: string): MetaData | null {
    return changetype<MetaData | null>(store.get("MetaData", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get value(): string {
    let value = this.get("value");
    return value!.toString();
  }

  set value(value: string) {
    this.set("value", Value.fromString(value));
  }
}

export class Total extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Total entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Total must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Total", id.toString(), this);
    }
  }

  static load(id: string): Total | null {
    return changetype<Total | null>(store.get("Total", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get day(): BigInt {
    let value = this.get("day");
    return value!.toBigInt();
  }

  set day(value: BigInt) {
    this.set("day", Value.fromBigInt(value));
  }

  get inks(): BigInt | null {
    let value = this.get("inks");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set inks(value: BigInt | null) {
    if (!value) {
      this.unset("inks");
    } else {
      this.set("inks", Value.fromBigInt(<BigInt>value));
    }
  }

  get tokens(): BigInt | null {
    let value = this.get("tokens");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set tokens(value: BigInt | null) {
    if (!value) {
      this.unset("tokens");
    } else {
      this.set("tokens", Value.fromBigInt(<BigInt>value));
    }
  }

  get sales(): BigInt | null {
    let value = this.get("sales");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set sales(value: BigInt | null) {
    if (!value) {
      this.unset("sales");
    } else {
      this.set("sales", Value.fromBigInt(<BigInt>value));
    }
  }

  get upgrades(): BigInt | null {
    let value = this.get("upgrades");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set upgrades(value: BigInt | null) {
    if (!value) {
      this.unset("upgrades");
    } else {
      this.set("upgrades", Value.fromBigInt(<BigInt>value));
    }
  }

  get artists(): BigInt | null {
    let value = this.get("artists");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set artists(value: BigInt | null) {
    if (!value) {
      this.unset("artists");
    } else {
      this.set("artists", Value.fromBigInt(<BigInt>value));
    }
  }

  get saleValue(): BigInt | null {
    let value = this.get("saleValue");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set saleValue(value: BigInt | null) {
    if (!value) {
      this.unset("saleValue");
    } else {
      this.set("saleValue", Value.fromBigInt(<BigInt>value));
    }
  }

  get users(): BigInt | null {
    let value = this.get("users");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set users(value: BigInt | null) {
    if (!value) {
      this.unset("users");
    } else {
      this.set("users", Value.fromBigInt(<BigInt>value));
    }
  }
}

export class DailyTotal extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save DailyTotal entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type DailyTotal must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("DailyTotal", id.toString(), this);
    }
  }

  static load(id: string): DailyTotal | null {
    return changetype<DailyTotal | null>(store.get("DailyTotal", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get day(): BigInt {
    let value = this.get("day");
    return value!.toBigInt();
  }

  set day(value: BigInt) {
    this.set("day", Value.fromBigInt(value));
  }

  get inks(): BigInt | null {
    let value = this.get("inks");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set inks(value: BigInt | null) {
    if (!value) {
      this.unset("inks");
    } else {
      this.set("inks", Value.fromBigInt(<BigInt>value));
    }
  }

  get tokens(): BigInt | null {
    let value = this.get("tokens");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set tokens(value: BigInt | null) {
    if (!value) {
      this.unset("tokens");
    } else {
      this.set("tokens", Value.fromBigInt(<BigInt>value));
    }
  }

  get sales(): BigInt | null {
    let value = this.get("sales");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set sales(value: BigInt | null) {
    if (!value) {
      this.unset("sales");
    } else {
      this.set("sales", Value.fromBigInt(<BigInt>value));
    }
  }

  get upgrades(): BigInt | null {
    let value = this.get("upgrades");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set upgrades(value: BigInt | null) {
    if (!value) {
      this.unset("upgrades");
    } else {
      this.set("upgrades", Value.fromBigInt(<BigInt>value));
    }
  }

  get artists(): BigInt | null {
    let value = this.get("artists");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set artists(value: BigInt | null) {
    if (!value) {
      this.unset("artists");
    } else {
      this.set("artists", Value.fromBigInt(<BigInt>value));
    }
  }

  get saleValue(): BigInt | null {
    let value = this.get("saleValue");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set saleValue(value: BigInt | null) {
    if (!value) {
      this.unset("saleValue");
    } else {
      this.set("saleValue", Value.fromBigInt(<BigInt>value));
    }
  }

  get users(): BigInt | null {
    let value = this.get("users");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set users(value: BigInt | null) {
    if (!value) {
      this.unset("users");
    } else {
      this.set("users", Value.fromBigInt(<BigInt>value));
    }
  }
}

export class InkLookup extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save InkLookup entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type InkLookup must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("InkLookup", id.toString(), this);
    }
  }

  static load(id: string): InkLookup | null {
    return changetype<InkLookup | null>(store.get("InkLookup", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get inkId(): string {
    let value = this.get("inkId");
    return value!.toString();
  }

  set inkId(value: string) {
    this.set("inkId", Value.fromString(value));
  }
}

export class Like extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Like entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Like must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Like", id.toString(), this);
    }
  }

  static load(id: string): Like | null {
    return changetype<Like | null>(store.get("Like", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get ink(): string {
    let value = this.get("ink");
    return value!.toString();
  }

  set ink(value: string) {
    this.set("ink", Value.fromString(value));
  }

  get artist(): string {
    let value = this.get("artist");
    return value!.toString();
  }

  set artist(value: string) {
    this.set("artist", Value.fromString(value));
  }

  get liker(): string {
    let value = this.get("liker");
    return value!.toString();
  }

  set liker(value: string) {
    this.set("liker", Value.fromString(value));
  }

  get createdAt(): BigInt {
    let value = this.get("createdAt");
    return value!.toBigInt();
  }

  set createdAt(value: BigInt) {
    this.set("createdAt", Value.fromBigInt(value));
  }
}
